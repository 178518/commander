#!/usr/bin/env ruby

require 'rubygems'
require 'commander'

program :name, 'Commander'
program :version, Commander::VERSION::STRING
program :description, 'Commander utility program.'

command :init do |c|
	c.syntax = 'commander init <file>'
	c.description = 'Initialize an empty file with a commander template.'
	c.example 'Create a new file with a commander template.', 'commander init ./bin/my_executable'
	c.when_called do |args|
	  abort "Provide a filepath." if args.empty?
		name = ask 'Machine name of program: '
		description = ask 'Describe your program: '
		commands = ask 'List the sub-commands you wish to create: ', Array
		begin
		  filepath = args.shift
      File.open(filepath, 'w') do |f|
        f.write <<-CODE
#!/usr/bin/env ruby

require 'rubygems'
require 'commander'

program :name, '#{name.capitalize}'
program :version, #{name.capitalize}::VERSION::STRING
program :description, '#{description}.'
 
CODE
        commands.each do |command|
          f.write <<-CODE
command :#{command} do |c|
  c.syntax = ''
  c.description = ''
  c.example 'description', 'code'
  c.when_called do |args|
    # Do something
  end
end

CODE
        end
       end
       say "Initialized template in #{filepath}"
		 rescue Exception => e
       abort e
		 end
	end
end

run!