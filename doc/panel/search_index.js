var search_data = {"index":{"longSearchIndex":["lib/commander/core_ext/array.rb","lib/commander/blank.rb","lib/commander/version.rb","commander","commander::command","commander","commander","commander::helpformatter","commander::helpformatter","commander::helpformatter","commander","commander","commander::runner","commander::runner","commander","commander::ui","commander::ui","lib/commander/core_ext/object.rb","commander::command::options","commander::command","commander::runner","commander::runner","commander::runner","commander::ui","commander::ui","commander::ui","commander::ui","commander::runner","commander::runner","commander::ui::progressbar","commander::ui","commander::command::options","commander::runner","commander::ui","commander::ui::progressbar","commander::command","commander::ui::progressbar","commander::ui::progressbar","object","commander::runner","blank","commander::ui::progressbar","commander::command::options","commander::runner","commander::ui","commander::platform","commander::ui","commander::command::options","commander::ui::askforclass","commander::command","commander::command::options","commander::helpformatter::base","commander::runner","commander::ui::progressbar","commander::command","array","commander::ui","commander::ui::progressbar","commander::runner","commander::ui","commander::ui::progressbar","commander::helpformatter::base","commander::helpformatter::terminal","commander::helpformatter::base","commander::helpformatter::terminal","commander::ui","commander::command","commander::runner","commander::ui","commander::ui","commander::ui","commander::ui::progressbar","commander::ui","commander::ui::progressbar","commander::helpformatter::terminal","commander::helpformatter::terminalcompact","commander::ui::progressbar","commander::ui::progressbar","commander::runner","commander::command","files/lib/commander/blank_rb.html","files/lib/commander/command_rb.html","files/lib/commander/core_ext_rb.html","files/lib/commander/core_ext/array_rb.html","files/lib/commander/core_ext/object_rb.html","files/lib/commander/delegates_rb.html","files/lib/commander/help_formatters_rb.html","files/lib/commander/help_formatters/base_rb.html","files/lib/commander/help_formatters/terminal_rb.html","files/lib/commander/help_formatters/terminal_compact_rb.html","files/lib/commander/import_rb.html","files/lib/commander/platform_rb.html","files/lib/commander/runner_rb.html","files/lib/commander/user_interaction_rb.html","files/lib/commander/version_rb.html"],"info":[["Array","lib/commander/core_ext/array.rb","classes/Array.html"," < Object","",1],["Blank","lib/commander/blank.rb","classes/Blank.html"," < ","",1],["Commander","lib/commander/command.rb","classes/Commander.html"," < ","",1],["Command","Commander","classes/Commander/Command.html"," < Object","",1],["Options","Commander::Command","classes/Commander/Command/Options.html"," < Object","Options struct.",1],["Delegates","Commander","classes/Commander/Delegates.html"," < ","",1],["HelpFormatter","Commander","classes/Commander/HelpFormatter.html"," < ","= Help Formatter  Commander's help formatters control the output when either the help command, or --help",1],["Base","Commander::HelpFormatter","classes/Commander/HelpFormatter/Base.html"," < Object","",1],["Terminal","Commander::HelpFormatter","classes/Commander/HelpFormatter/Terminal.html"," < Commander::HelpFormatter::Base","",1],["TerminalCompact","Commander::HelpFormatter","classes/Commander/HelpFormatter/TerminalCompact.html"," < Commander::HelpFormatter::Terminal","",1],["Platform","Commander","classes/Commander/Platform.html"," < ","",1],["Runner","Commander","classes/Commander/Runner.html"," < Object","",1],["CommandError","Commander::Runner","classes/Commander/Runner/CommandError.html"," < StandardError","",1],["InvalidCommandError","Commander::Runner","classes/Commander/Runner/InvalidCommandError.html"," < Commander::Runner::CommandError","",1],["UI","Commander","classes/Commander/UI.html"," < ","= User Interaction  Commander's user interaction module mixes in common methods which extend HighLine's",1],["AskForClass","Commander::UI","classes/Commander/UI/AskForClass.html"," < ","Implements ask_for_CLASS methods.",1],["ProgressBar","Commander::UI","classes/Commander/UI/ProgressBar.html"," < Object","= Progress Bar  Terminal progress bar utility. In its most basic form requires that the developer specifies",1],["Object","lib/commander/core_ext/object.rb","classes/Object.html"," < ","",1],["__hash__","Commander::Command::Options","classes/Commander/Command/Options.html#method-i-__hash__","()","",2],["action","Commander::Command","classes/Commander/Command.html#method-i-action","(*args, &block)","",2],["add_command","Commander::Runner","classes/Commander/Runner.html#method-i-add_command","(command)","Add a command object to this runner.",2],["alias?","Commander::Runner","classes/Commander/Runner.html#method-i-alias-3F","(name)","Check if command _name_ is an alias.",2],["alias_command","Commander::Runner","classes/Commander/Runner.html#method-i-alias_command","(alias_name, name, *args)","Alias command _name_ with _alias_name_. Optionally _args_ may be passed as if they were being passed",2],["applescript","Commander::UI","classes/Commander/UI.html#method-i-applescript","(script)","Execute apple _script_.",2],["ask_editor","Commander::UI","classes/Commander/UI.html#method-i-ask_editor","(input = nil, editor = ENV['EDITOR'] || 'mate')","Prompt _editor_ for input. Optionally supply initial _input_ which is written to the editor.  The _editor_",2],["choose","Commander::UI","classes/Commander/UI.html#method-i-choose","(message, *choices)","Choose from a set array of _choices_.",2],["color","Commander::UI","classes/Commander/UI.html#method-i-color","(*args)","'Say' something using the specified color  === Examples   color 'I am blue', :blue   color 'I am bold',",2],["command","Commander::Runner","classes/Commander/Runner.html#method-i-command","(name, &block)","Creates and yields a command instance when a block is passed. Otherwise attempts to return the command,",2],["command_exists?","Commander::Runner","classes/Commander/Runner.html#method-i-command_exists-3F","(name)","Check if a command _name_ exists.",2],["completed?","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-completed-3F","()","Whether or not the operation has completed.",2],["converse","Commander::UI","classes/Commander/UI.html#method-i-converse","(prompt, responses = {})","Converse with speech recognition.   Currently a \"poorman's\" DSL to utilize applescript and the MacOS",2],["default","Commander::Command::Options","classes/Commander/Command/Options.html#method-i-default","(defaults = {})","",2],["default_command","Commander::Runner","classes/Commander/Runner.html#method-i-default_command","(name)","Default command _name_ to be used when no other command is found in the arguments.",2],["enable_paging","Commander::UI","classes/Commander/UI.html#method-i-enable_paging","()","Enable paging of output after called.",2],["erase_line","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-erase_line","()","Erase previous terminal line.",2],["example","Commander::Command","classes/Commander/Command.html#method-i-example","(description, command)","Add a usage example for this command.  Usage examples are later displayed in help documentation created",2],["finished?","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-finished-3F","()","Whether or not the operation is complete, and we have finished.",2],["generate_tokens","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-generate_tokens","()","Generates tokens for this step.",2],["get_binding","Object","classes/Object.html#method-i-get_binding","()","Return the current binding.",2],["global_option","Commander::Runner","classes/Commander/Runner.html#method-i-global_option","(*args, &block)","Add a global option; follows the same syntax as Command#option This would be used for switches such as",2],["included","Blank","classes/Blank.html#method-c-included","(base)","",2],["increment","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-increment","(tokens = {})","Increment progress. Optionally pass _tokens_ which can be displayed in the output format.",2],["inspect","Commander::Command::Options","classes/Commander/Command/Options.html#method-i-inspect","()","",2],["instance","Commander::Runner","classes/Commander/Runner.html#method-c-instance","()","Return singleton Runner instance.",2],["io","Commander::UI","classes/Commander/UI.html#method-i-io","(input = nil, output = nil, &block)","Normalize IO streams, allowing for redirection of +input+ and/or +output+, for example:    $ foo    ",2],["jruby?","Commander::Platform","classes/Commander/Platform.html#method-c-jruby-3F","()","",2],["log","Commander::UI","classes/Commander/UI.html#method-i-log","(action, *args)","'Log' an _action_ to the terminal. This is typically used for verbose output regarding actions performed.",2],["method_missing","Commander::Command::Options","classes/Commander/Command/Options.html#method-i-method_missing","(meth, *args, &block)","",2],["method_missing","Commander::UI::AskForClass","classes/Commander/UI/AskForClass.html#method-i-method_missing","(meth, *args, &block)","",2],["new","Commander::Command","classes/Commander/Command.html#method-c-new","(name)","Initialize new command with specified _name_.",2],["new","Commander::Command::Options","classes/Commander/Command/Options.html#method-c-new","()","",2],["new","Commander::HelpFormatter::Base","classes/Commander/HelpFormatter/Base.html#method-c-new","(runner;)","",2],["new","Commander::Runner","classes/Commander/Runner.html#method-c-new","(args = ARGV)","Initialize a new command runner. Optionally supplying _args_ for mocking, or arbitrary usage.",2],["new","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-c-new","(total, options = {})","Creates a new progress bar.  === Options    :title              Title, defaults to \"Progress\"   :width",2],["option","Commander::Command","classes/Commander/Command.html#method-i-option","(*args, &block)","Add an option.  Options are parsed via OptionParser so view it for additional usage documentation. A",2],["parse","Array","classes/Array.html#method-c-parse","(string)","Split _string_ into an array. Used in conjunction with Highline's #ask, or #ask_for_array methods, which",2],["password","Commander::UI","classes/Commander/UI.html#method-i-password","(message = 'Password: ', mask = '*')","Ask the user for a password. Specify a custom _message_ other than 'Password: ' or override the  default",2],["percent_complete","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-percent_complete","()","Completion percentage.",2],["program","Commander::Runner","classes/Commander/Runner.html#method-i-program","(key, *args, &block)","Assign program information.  === Examples    # Set data   program :name, 'Commander'   program :version,",2],["progress","Commander::UI","classes/Commander/UI.html#method-i-progress","(arr, options = {})","Output progress while iterating _arr_.  === Examples    uris = %w( http://vision-media.ca http://google.com",2],["progress_bar","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-progress_bar","()","Formatted progress bar.",2],["render","Commander::HelpFormatter::Base","classes/Commander/HelpFormatter/Base.html#method-i-render","()","",2],["render","Commander::HelpFormatter::Terminal","classes/Commander/HelpFormatter/Terminal.html#method-i-render","()","",2],["render_command","Commander::HelpFormatter::Base","classes/Commander/HelpFormatter/Base.html#method-i-render_command","(command;)","",2],["render_command","Commander::HelpFormatter::Terminal","classes/Commander/HelpFormatter/Terminal.html#method-i-render_command","(command)","",2],["reset_io","Commander::UI","classes/Commander/UI.html#method-i-reset_io","()","Reset IO to initial constant streams.",2],["run","Commander::Command","classes/Commander/Command.html#method-i-run","(*args)","Run the command with _args_.  * parses options, call option blocks * invokes when_called proc",2],["run!","Commander::Runner","classes/Commander/Runner.html#method-i-run-21","()","Run command parsing and execution process.",2],["say_error","Commander::UI","classes/Commander/UI.html#method-i-say_error","(*args)","'Say' something using the ERROR color (red).  === Examples   say_error 'Everything is not fine'   say_error",2],["say_ok","Commander::UI","classes/Commander/UI.html#method-i-say_ok","(*args)","'Say' something using the OK color (green).  === Examples   say_ok 'Everything is fine'   say_ok 'It",2],["say_warning","Commander::UI","classes/Commander/UI.html#method-i-say_warning","(*args)","'Say' something using the WARNING color (yellow).  === Examples   say_warning 'This is a warning'   say_warning",2],["show","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-show","()","Output the progress bar.",2],["speak","Commander::UI","classes/Commander/UI.html#method-i-speak","(message, voice = :Alex)","Speak _message_ using _voice_ which defaults to 'Alex', which is one of the better voices.  === Examples",2],["steps_remaining","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-steps_remaining","()","Number of steps left.",2],["template","Commander::HelpFormatter::Terminal","classes/Commander/HelpFormatter/Terminal.html#method-i-template","(name)","",2],["template","Commander::HelpFormatter::TerminalCompact","classes/Commander/HelpFormatter/TerminalCompact.html#method-i-template","(name)","",2],["time_elapsed","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-time_elapsed","()","Time that has elapsed since the operation started.",2],["time_remaining","Commander::UI::ProgressBar","classes/Commander/UI/ProgressBar.html#method-i-time_remaining","()","Estimated time remaining.",2],["version","Commander::Runner","classes/Commander/Runner.html#method-i-version","()","Return program version.",2],["when_called","Commander::Command","classes/Commander/Command.html#method-i-when_called","(*args, &block)","Handle execution of command. The handler may be a class,  object, or block (see examples below).  ===",2],["blank.rb","files/lib/commander/blank_rb.html","files/lib/commander/blank_rb.html","","",3],["command.rb","files/lib/commander/command_rb.html","files/lib/commander/command_rb.html","","",3],["core_ext.rb","files/lib/commander/core_ext_rb.html","files/lib/commander/core_ext_rb.html","","",3],["array.rb","files/lib/commander/core_ext/array_rb.html","files/lib/commander/core_ext/array_rb.html","","",3],["object.rb","files/lib/commander/core_ext/object_rb.html","files/lib/commander/core_ext/object_rb.html","","",3],["delegates.rb","files/lib/commander/delegates_rb.html","files/lib/commander/delegates_rb.html","","",3],["help_formatters.rb","files/lib/commander/help_formatters_rb.html","files/lib/commander/help_formatters_rb.html","","",3],["base.rb","files/lib/commander/help_formatters/base_rb.html","files/lib/commander/help_formatters/base_rb.html","","",3],["terminal.rb","files/lib/commander/help_formatters/terminal_rb.html","files/lib/commander/help_formatters/terminal_rb.html","","",3],["terminal_compact.rb","files/lib/commander/help_formatters/terminal_compact_rb.html","files/lib/commander/help_formatters/terminal_compact_rb.html","","",3],["import.rb","files/lib/commander/import_rb.html","files/lib/commander/import_rb.html","","",3],["platform.rb","files/lib/commander/platform_rb.html","files/lib/commander/platform_rb.html","","",3],["runner.rb","files/lib/commander/runner_rb.html","files/lib/commander/runner_rb.html","","",3],["user_interaction.rb","files/lib/commander/user_interaction_rb.html","files/lib/commander/user_interaction_rb.html","","",3],["version.rb","files/lib/commander/version_rb.html","files/lib/commander/version_rb.html","","",3]],"searchIndex":["array","blank","commander","command","options","delegates","helpformatter","base","terminal","terminalcompact","platform","runner","commanderror","invalidcommanderror","ui","askforclass","progressbar","object","__hash__()","action()","add_command()","alias?()","alias_command()","applescript()","ask_editor()","choose()","color()","command()","command_exists?()","completed?()","converse()","default()","default_command()","enable_paging()","erase_line()","example()","finished?()","generate_tokens()","get_binding()","global_option()","included()","increment()","inspect()","instance()","io()","jruby?()","log()","method_missing()","method_missing()","new()","new()","new()","new()","new()","option()","parse()","password()","percent_complete()","program()","progress()","progress_bar()","render()","render()","render_command()","render_command()","reset_io()","run()","run!()","say_error()","say_ok()","say_warning()","show()","speak()","steps_remaining()","template()","template()","time_elapsed()","time_remaining()","version()","when_called()","blank.rb","command.rb","core_ext.rb","array.rb","object.rb","delegates.rb","help_formatters.rb","base.rb","terminal.rb","terminal_compact.rb","import.rb","platform.rb","runner.rb","user_interaction.rb","version.rb"]}}